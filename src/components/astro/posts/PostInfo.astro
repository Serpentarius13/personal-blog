---
import { formatDate } from "@/lib/date";
import type { CollectionEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"posts">;
  readingTime: string;
}

const { post, readingTime } = Astro.props;
---

<div class="mx-auto mt-4 flex h-6 w-fit flex-wrap items-center gap-2">
  <div class="min-w-20">
    <span
      class="badge badge-accent w-full data-[loading='true']:skeleton"
      id="views-badge"
      data-slug={post.slug}
    >
      Views: &nbsp;<span id="views-count"></span>
    </span>
  </div>

  <div class="badge badge-primary">{formatDate(post.data.date)}</div>

  <div class="badge badge-success">{readingTime}</div>

  {
    post.data.trackName && (
      <div class="badge badge-info" data-pagefind-filter="Track">
        Track: {post.data.trackName}
      </div>
    )
  }
</div>

<script>
  import { postsApi } from "@/lib/api";

  function main() {
    const badge = document.querySelector("#views-badge") as HTMLElement;
    const count = document.querySelector("#views-count");

    if (!count || !badge) return;

    badge.dataset.loading = "true";

    const slug = badge.dataset.slug!;

    postsApi
      .getPost(slug)
      .then(({ post }) => {
        count.textContent = String(post.views);

        const cat = document.getElementById("cat-count") as HTMLElement | undefined;
        if (!cat) return;
        cat.textContent = String(post.likes);
      })
      .finally(() => {
        badge.dataset.loading = "false";
      })
      .catch(() => {
        count.textContent = "0";
      });
  }

  main();
</script>
