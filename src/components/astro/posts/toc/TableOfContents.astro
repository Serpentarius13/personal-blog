---
import type { MarkdownHeading } from "astro";
import TocItem from "./TocItem.astro";
import { cn } from "@/lib/cn";
import { type TocHeading } from "./toc.types";
import type { ComponentProps, HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"aside"> {
  headings: MarkdownHeading[];
  class?: string;
}

const { headings, class: className, ...props } = Astro.props;

function buildToc(headings: MarkdownHeading[]): TocHeading[] {
  const toc: TocHeading[] = [];
  const stack: TocHeading[] = [];

  headings.forEach((h) => {
    const heading = { ...h, children: [] } satisfies TocHeading;

    while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
      stack.pop();
    }

    if (stack.length === 0) {
      toc.push(heading);
    } else {
      stack[stack.length - 1].children?.push(heading);
    }

    stack.push(heading);
  });

  return toc;
}

const toc = buildToc(headings.filter((h) => h.depth !== 1));
---

<aside
  {...props}
  class={cn(
    "p-2 shadow-md shadow-primary  rounded-lg bg-base-100 backdrop-blur-xl z-[10]",
    className,
  )}
  id="toc"
>
  <ul class="menu menu-xs w-full max-h-[400px] overflow-auto flex-nowrap">
    {toc.map((heading, index) => <TocItem heading={heading} index={index} />)}
  </ul>
</aside>

<script>
  const setupToc = () => {
    if (!window.matchMedia("(min-width: 1024px)").matches) return;

    const links = document.querySelectorAll(
      "#toc a[href^='#']",
    ) as NodeListOf<HTMLAnchorElement>;

    for (const link of links) {
      link.addEventListener("click", (event) => {
        event.preventDefault();
        const target = document.querySelector(link.href);
        target?.scrollIntoView({ behavior: "smooth", block: "start" });
      });
    }

    const header = document.querySelector("header");
    const headerHeight = header ? header.offsetHeight : 0;

    const observer = new IntersectionObserver(
      (sections) => {
        sections.forEach((section) => {
          const heading = section.target.querySelector("h2, h3, h4, h5, h6");
          if (!heading) return;

          const id = heading.getAttribute("id");
          const link = document.querySelector(`#toc li a[href="#${id}"]`);
          if (!link) return;

          link.classList[section.isIntersecting ? "add" : "remove"]("seeing");
        });
      },
      {
        rootMargin: `-${headerHeight}px 0px 0px 0px`,
      },
    );

    const sections = document.querySelectorAll(".prose section");
    sections.forEach((section) => {
      observer.observe(section);
    });
  };

  document.addEventListener("astro:page-load", setupToc);
  document.addEventListener("astro:after-swap", setupToc);
</script>
