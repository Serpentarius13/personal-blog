---
interface Props {
  slug: string;
}
const { slug } = Astro.props;
---

<div
  tabindex="0"
  role="button"
  id="cat-button"
  class="btn btn-ghost btn-sm relative flex flex-nowrap items-center px-0 text-[28px] opacity-0"
  data-slug={slug}
>
  <span class="sr-only"> Click the cat! </span>

  <div class="swap">
    <div class="swap-on">ðŸ˜¸</div>
    <div class="swap-off">ðŸ˜¾</div>
  </div>

  <span id="cat-count" class="mr-1 text-sm">...</span>
</div>

<script>
  import { postsApi } from "@/lib/api";
  import { debounce } from "@/lib/utils";

  const catButton = document.querySelector("#cat-button") as HTMLDivElement;
  const slug = catButton.dataset.slug!;

  let lastPlayedSound: string | undefined;
  const sounds = ["angry", "attention", "little", "scary", "sweet", "purr"];
  const getRandomSound = () => sounds[(sounds.length * Math.random()) | 0];

  let hasPat = false;

  if (localStorage.getItem(`pat-cat-${slug}`)) {
    catButton.classList.add("swap-active");
  }

  const handlePlayCat = () => {
    // yeah mom im a brogrammer https://stackoverflow.com/questions/5915096/get-a-random-item-from-a-javascript-array
    let randomSound = getRandomSound();
    while (randomSound === lastPlayedSound) {
      randomSound = getRandomSound();
    }
    lastPlayedSound = randomSound;
    const audio = new Audio(window.location.origin + "/sounds/" + randomSound + ".wav");
    audio.volume = 0.3;
    audio.play();
  };

  const NOTES = "ðŸŽ¶";

  const createCatNotes = () => {
    const span = document.createElement("span");
    span.classList.add("cat-notes");
    span.textContent = NOTES;
    const isMarginNegative = Math.random() > 0.5;
    const marginValue = Math.random() * 15;
    span.style.marginLeft = isMarginNegative ? `-${marginValue}px` : `${marginValue}px`;
    catButton.appendChild(span);
    setTimeout(() => {
      span.remove();
    }, 1000);
  };

  let pendingPats = 0;

  const handleApplyPats = debounce(() => {
    postsApi.likePost(slug, pendingPats).then(() => {
      localStorage.setItem(`pat-cat-${slug}`, "true");
    });
  }, 1000);

  catButton.addEventListener("click", async () => {
    handlePlayCat();

    catButton.classList.add("swap-active");
    catButton.classList.add("disabled");

    createCatNotes();

    pendingPats++;
    const count = document.querySelector("#cat-count") as HTMLElement;
    count.textContent = String(Number(count.textContent) + 1);

    handleApplyPats();
  });

  let hasShownCat = false;

  if (window.scrollY > 250 || hasPat) {
    hasShownCat = true;
    catButton.classList.add("visible");
  }

  const handleScroll = debounce(() => {
    if (hasShownCat) return;

    if (window.scrollY > 250) {
      hasShownCat = true;
      catButton.classList.add("visible");
      return;
    }
  }, 100);

  window.addEventListener("scroll", handleScroll, { passive: true });
</script>

<style is:global>
  #cat-button {
    &.visible {
      @apply opacity-100;
    }
  }

  .cat-notes {
    @apply opacity-0 text-xl absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 block w-[32px] h-[32px] z-[10];
    animation: 1s animate-notes forwards;
  }

  @keyframes animate-notes {
    70% {
      @apply opacity-100;
    }

    100% {
      @apply opacity-0 -translate-y-[50px];
    }
  }
</style>
