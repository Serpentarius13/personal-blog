---
import Navbar from "@/components/astro/Navbar.astro";
import "@/styles/global.scss";
import "@/styles/components.scss";
import "@/styles/code.scss";
import "@fontsource/jetbrains-mono";
import { THEMES, CODE_THEMES, LIGHT_THEMES, DARK_THEMES } from "config";
import Footer from "@/components/astro/Footer.astro";
import { ViewTransitions } from "astro:transitions";
import { cn } from "@/lib/cn";

interface Props {
  title: string;
  description: string;
  mainClassname?: string;
}

const { title, description, mainClassname } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width; initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <ViewTransitions />
  </head>
  <body class="min-h-full h-full">
    <div class="max-w-screen overflow-x-hidden min-h-full flex flex-col">
      <Navbar />
      <main class={cn(" h-0 flex-1", mainClassname)}>
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<script
  is:inline
  define:vars={{ THEMES, CODE_THEMES, LIGHT_THEMES, DARK_THEMES }}
>
  const THEME_KEY = "theme";

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      const theme = localStorage.getItem(THEME_KEY);

      if (theme) {
        return theme;
      }
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? DARK_THEMES.dark
      : LIGHT_THEMES.bumblebee;
  };

  const getDocumentTheme = () => {
    return document.documentElement.dataset.theme;
  };

  const getCodeTheme = (theme) => {
    const codeTheme =
      theme in DARK_THEMES
        ? CODE_THEMES["ayu-dark"]
        : CODE_THEMES["everforest-light"];
    return codeTheme;
  };

  const setDarkMode = (document) => {
    const theme = getThemePreference();
    const codeTheme = getCodeTheme(theme);

    document.documentElement.dataset.theme = theme;
    document.documentElement.dataset.codeTheme = codeTheme;
  };

  setDarkMode(document);

  document.addEventListener("astro:before-swap", (event) => {
    setDarkMode(event.newDocument);
  });

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const theme = getDocumentTheme();
      if (!theme) return;
      localStorage.setItem(THEME_KEY, theme);
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["data-theme"],
    });
  }
</script>
