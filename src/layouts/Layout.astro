---
import Navbar from "@/components/astro/Navbar.astro";
import "@/styles/index.css";

import Footer from "@/components/astro/Footer.astro";
import { cn } from "@/lib/cn";
import SearchDialog from "@/components/astro/search/SearchDialog.astro";

interface Props {
  title: string;
  description: string;
  mainClassname?: string;
  noIndex?: boolean;
  image?: string;
}

const { title, description, mainClassname, noIndex, image } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const imageUrl = image && new URL(image, Astro.url);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>
    <meta name="description" content={description} />

    {noIndex && <meta name="robots" content="noindex" />}

    <link rel="canonical" href={canonicalURL} />

    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content="Void Flower" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:url" content={Astro.url} />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />

    {imageUrl && <meta property="og:image" content={imageUrl} />}
    {imageUrl && <meta property="twitter:image" content={imageUrl} />}

    <link
      rel="alternate"
      type="application/rss+xml"
      title={title}
      href={new URL("rss.xml", Astro.site)}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <slot name="head" />

    <script is:inline>
      const darkThemes = {
        night: "night",
        luxury: "luxury",
      };

      const THEME_KEY = "theme";
      const getThemePreference = () => {
        if (typeof localStorage !== "undefined") {
          const theme = localStorage.getItem(THEME_KEY);

          if (theme) {
            return theme;
          }
        }

        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? // must be synced on its own because I don't wanna import themes into head on page load
            "night"
          : "autumn";
      };

      const getCodeTheme = (theme) => {
        const codeTheme = theme in darkThemes ? "ayu-dark" : "rose-pine-dawn";
        return codeTheme;
      };

      const getDocumentTheme = () => {
        return document.documentElement.dataset.theme;
      };

      const setDarkMode = (document) => {
        const theme = getThemePreference();
        const codeTheme = getCodeTheme(theme);

        document.documentElement.dataset.theme = theme;
        document.documentElement.dataset.codeTheme = codeTheme;
      };

      setDarkMode(document);

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const theme = getDocumentTheme();
          if (!theme) return;
          const codeTheme = getCodeTheme(theme);
          document.documentElement.dataset.codeTheme = codeTheme;
          localStorage.setItem(THEME_KEY, theme);
        });

        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["data-theme"],
        });
      }
    </script>

    <style>
      @view-transition {
        navigation: auto; /* enabled! */
      }
    </style>
  </head>
  <body class="px-3 md:px-1">
    <div class="flex max-w-full flex-col" id="app">
      <Navbar>
        <slot name="navbar" slot="default" />
      </Navbar>

      <main class={cn("h-0 flex-1", mainClassname)}>
        <slot />
      </main>
      <Footer />

      <SearchDialog />
    </div>
  </body>
</html>

<style>
  html {
    width: 100%;
    height: 100%;
  }

  body {
    min-height: 100%;
  }

  #app {
    max-width: 100%;
    height: 100%;
    overflow-x: hidden;
  }

  @supports (overflow: clip) {
    #app {
      overflow-x: clip;
    }
  }
</style>
