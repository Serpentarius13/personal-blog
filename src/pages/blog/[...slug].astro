---
import AppIcon from "@/components/astro/AppIcon.astro";
import Layout from "@/layouts/Layout.astro";
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import type { CollectionEntry } from "astro:content";
import { IconSet } from "config";
import "@fontsource-variable/jetbrains-mono";
import PostCard from "@/components/astro/posts/PostCard.astro";
import PostPage from "@/components/astro/posts/PostPage.astro";
import { getPosts } from "@/lib/posts";

export const getStaticPaths = (async () => {
  const posts = await getPosts();

  return posts.map((post, ix) => {
    const postsWithoutThisOne = posts.filter((p) => p.slug !== post.slug);

    return {
      params: { slug: post.slug },
      props: {
        post,
        nextPost:
          postsWithoutThisOne.at(ix + 1) ?? postsWithoutThisOne.at(ix - 1),
      },
    };
  });
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {
  post: CollectionEntry<"posts">;
}
//@ts-expect-error
interface Params extends InferGetStaticParamsType<typeof getStaticPaths> {
  slug: string;
}

const { post, nextPost } = Astro.props;
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={new URL(post.data.image.src, Astro.site).toString()}
>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
    <meta property="twitter:card" content="summary_large_image" />
  </Fragment>

  <PostPage post={post} />

  {
    nextPost && (
      <div class="box">
        <h4 class="text-xl mb-3">Next post:</h4>
        <PostCard entry={nextPost} />
      </div>
    )
  }

  <button
    id="scroll-top-btn"
    class="fixed bottom-2 btn-primary right-2 z-[10] btn text-2xl opacity-0 translate-y-[120px] [&.visible]:translate-y-0 [&.visible]:opacity-100"
  >
    <AppIcon set={IconSet.LINE_MD} name="arrow-up" />
  </button>
</Layout>

<script>
  import { postsApi } from "@/lib/api";

  const attachListeners = () => {
    const postSlug = window.location.pathname.split("/").pop()!;
    let hasViewed = !!localStorage.getItem(`view-post-${postSlug}`);
    let hasRead = !!localStorage.getItem(`read-post-${postSlug}`);

    if (!hasRead) {
      const footer = document.querySelector("#footer");
      if (!footer) return;
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting && !hasRead) {
              await postsApi.readPost(postSlug).then((res) => {
                if (!res.success) {
                  return;
                }
                localStorage.setItem(`read-post-${postSlug}`, "true");
                hasRead = true;
              });

              observer.disconnect();
            }
          });
        },
        { rootMargin: "200px" },
      );
      observer.observe(footer);
    }

    if (!hasViewed) {
      postsApi.viewPost(postSlug).then((res) => {
        if (!res.success) {
          return;
        }
        localStorage.setItem(`view-post-${postSlug}`, "true");
        hasViewed = true;
      });
    }
  };

  document.addEventListener("astro:page-load", attachListeners);
  document.addEventListener("astro:after-swap", attachListeners);
</script>

<script>
  import { debounce } from "@/lib/utils";

  const attachListeners = () => {
    const button = document.querySelector("#scroll-top-btn");

    button?.addEventListener("click", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    });

    let prevScroll = 0;

    const handleScroll = debounce(() => {
      if (!prevScroll) {
        prevScroll = window.scrollY;
        return;
      }

      button?.classList[prevScroll > window.scrollY ? "add" : "remove"](
        "visible",
      );

      prevScroll = window.scrollY;
    }, 100);

    window.addEventListener("scroll", handleScroll);
  };

  document.addEventListener("astro:page-load", attachListeners);
</script>

<style is:global>
  :is(h1, h2, h3, h4, h5, h6) > a {
    @apply no-underline hover:text-primary transition-all !important;
  }

  a[target="_blank"] {
    @apply text-primary hover:text-primary/50 transition-all;
  }
</style>
