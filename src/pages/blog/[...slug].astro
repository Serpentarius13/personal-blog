---
import ScrollTopButton from "@/components/astro/ScrollTopButton.astro";
import NavbarShrink from "@/components/astro/navbar/NavbarShrink.astro";
import CatButton from "@/components/astro/posts/CatButton.astro";
import PostNavigation from "@/components/astro/posts/PostNavigation.astro";
import PostPage from "@/components/astro/posts/PostPage.astro";
import Layout from "@/layouts/base";
import { getPosts } from "@/lib/posts";
import "@fontsource-variable/jetbrains-mono";
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async () => {
  const posts = await getPosts();

  return posts.map((post, ix) => {
    const nextPost = posts.at(ix + 1 < posts.length ? ix + 1 : 0);
    const prevPost = posts.at(ix - 1 >= 0 ? ix - 1 : -1);

    return {
      params: { slug: post.slug },
      props: {
        post,
        nextPost: nextPost && nextPost?.slug === post.slug ? undefined : nextPost,
        prevPost: prevPost?.slug === nextPost?.slug || !post ? undefined : prevPost,
      },
    };
  });
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}
//@ts-ignore
interface Params extends InferGetStaticParamsType<typeof getStaticPaths> {
  slug: string;
}

const { post, nextPost, prevPost } = Astro.props;
---

<Layout title={post.data.title} description={post.data.description}>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
  </Fragment>

  <Fragment slot="navbar">
    <CatButton slug={post.slug} />
  </Fragment>

  <PostPage post={post} />

  <PostNavigation prev={prevPost} next={nextPost} />

  <div class="hidden" id="slug-holder" data-slug={post.slug}></div>

  <ScrollTopButton />

  <NavbarShrink />
</Layout>

<script>
  import { postsApi } from "@/lib/api";

  function detectBot(userAgent: string): boolean {
    const knownBotPatterns = [/bot|crawl|spider/i, /google|bing|yandex/i];
    return knownBotPatterns.some((pattern) => new RegExp(pattern).test(userAgent));
  }

  const isRunByBot = detectBot(navigator.userAgent);

  if (!isRunByBot) {
    main();
  }

  function main() {
    const slugHolder = document.querySelector("#slug-holder") as HTMLElement | undefined;
    if (!slugHolder) return;

    const slug = slugHolder.dataset.slug;
    if (!slug) return;

    let hasViewed = !!localStorage.getItem(`view-post-${slug}`);
    let hasRead = !!localStorage.getItem(`read-post-${slug}`);

    if (!hasRead) {
      const footer = document.querySelector("#footer");
      if (!footer) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting && !hasRead) {
              await postsApi.readPost(slug).then((res) => {
                if ("error" in res) {
                  return;
                }
                localStorage.setItem(`read-post-${slug}`, "true");
                hasRead = true;
              });

              observer.disconnect();
            }
          });
        },
        { rootMargin: "200px" },
      );
      observer.observe(footer);
    }

    if (!hasViewed) {
      postsApi.viewPost(slug).then((res) => {
        if ("error" in res) {
          return;
        }
        localStorage.setItem(`view-post-${slug}`, "true");
        hasViewed = true;
      });
    }
  }
</script>

<style is:global>
  :is(h1, h2, h3, h4, h5, h6) > a {
    @apply no-underline hover:text-primary transition-all !important;
  }

  a[target="_blank"] {
    @apply text-primary hover:text-primary/50 transition-all;
  }
</style>
