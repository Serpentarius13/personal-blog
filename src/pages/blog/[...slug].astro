---
import AppIcon from "@/components/astro/AppIcon.astro";
import Layout from "@/layouts/Layout.astro";
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import type { CollectionEntry } from "astro:content";
import { IconSet } from "config";
import "@fontsource-variable/jetbrains-mono";
import PostPage from "@/components/astro/posts/PostPage.astro";
import { getPosts } from "@/lib/posts";
import CatButton from "@/components/astro/posts/CatButton.astro";
import PostNavigation from "@/components/astro/posts/PostNavigation.astro";

export const getStaticPaths = (async () => {
  const posts = await getPosts();

  return posts.map((post, ix) => {
    return {
      params: { slug: post.slug },
      props: {
        post,
        nextPost: posts.at(ix + 1 < posts.length ? ix + 1 : 0),
        prevPost: posts.at(ix - 1 >= 0 ? ix - 1 : -1),
        hasOnlyOneLeft: posts.length === 2,
      },
    };
  });
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {
  post: CollectionEntry<"posts">;
}
//@ts-expect-error
interface Params extends InferGetStaticParamsType<typeof getStaticPaths> {
  slug: string;
}

const { post, nextPost, prevPost, hasOnlyOneLeft } = Astro.props;
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={new URL(post.data.image.src, Astro.site).toString()}
>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
    <meta property="twitter:card" content="summary_large_image" />
  </Fragment>

  <Fragment slot="navbar">
    <CatButton slug={post.slug} />
  </Fragment>

  <PostPage post={post} />

  <PostNavigation
    prev={hasOnlyOneLeft ? undefined : `/blog/${prevPost?.slug}`}
    next={nextPost ? `/blog/${nextPost?.slug}` : undefined}
  />

  <div class="hidden" id="slug-holder" data-slug={post.slug}></div>

  <button
    id="scroll-top-btn"
    class="fixed bottom-2 btn-primary right-2 z-[10] btn text-2xl opacity-0 translate-y-[120px] [&.visible]:translate-y-0 [&.visible]:opacity-100"
  >
    <AppIcon set={IconSet.LINE_MD} name="arrow-up" />
  </button>
</Layout>

<script>
  import { postsApi } from "@/lib/api";

  function main() {
    const slugHolder = document.querySelector("#slug-holder") as
      | HTMLElement
      | undefined;
    if (!slugHolder) return;

    const slug = slugHolder.dataset.slug!;

    let hasViewed = !!localStorage.getItem(`view-post-${slug}`);
    let hasRead = !!localStorage.getItem(`read-post-${slug}`);

    if (!hasRead) {
      const footer = document.querySelector("#footer");
      if (!footer) return;
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting && !hasRead) {
              await postsApi.readPost(slug).then((res) => {
                if (!res.success) {
                  return;
                }
                localStorage.setItem(`read-post-${slug}`, "true");
                hasRead = true;
              });

              observer.disconnect();
            }
          });
        },
        { rootMargin: "200px" },
      );
      observer.observe(footer);
    }

    if (!hasViewed) {
      postsApi.viewPost(slug).then((res) => {
        if (!res.success) {
          return;
        }
        localStorage.setItem(`view-post-${slug}`, "true");
        hasViewed = true;
      });
    }
  }
  main();
</script>

<script>
  import { debounce } from "@/lib/utils";

  const button = document.querySelector("#scroll-top-btn");

  button?.addEventListener("click", () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  });

  let prevScroll = 0;

  const handleScroll = debounce(() => {
    if (!prevScroll) {
      prevScroll = window.scrollY;
      return;
    }

    button?.classList[prevScroll > window.scrollY ? "add" : "remove"](
      "visible",
    );

    prevScroll = window.scrollY;
  }, 100);

  window.addEventListener("scroll", handleScroll);
</script>

<style is:global>
  :is(h1, h2, h3, h4, h5, h6) > a {
    @apply no-underline hover:text-primary transition-all !important;
  }

  a[target="_blank"] {
    @apply text-primary hover:text-primary/50 transition-all;
  }
</style>
