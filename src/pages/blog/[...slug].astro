---
import ScrollTopButton from "@/components/astro/ScrollTopButton.astro";
import CatButton from "@/components/astro/posts/CatButton.astro";
import PostNavigation from "@/components/astro/posts/PostNavigation.astro";
import PostPage from "@/components/astro/posts/PostPage.astro";
import ConfigDropdown from "@/components/astro/prose-config/ConfigDropdown.astro";
import Layout from "@/layouts/base";
import { getPosts } from "@/lib/posts";
import "@fontsource-variable/jetbrains-mono";
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async () => {
  const posts = await getPosts();

  return posts.map((post, ix) => {
    const searchAgainst = post.data.trackName
      ? posts.filter((p) => p.data.trackName === post.data.trackName && p.slug !== post.slug)
      : posts;

    const nextPost = searchAgainst.at(ix + 1 < searchAgainst.length ? ix + 1 : 0);
    const prevPost = searchAgainst.at(ix - 1 >= 0 ? ix - 1 : -1);

    return {
      params: { slug: post.slug },
      props: {
        post,
        nextPost: nextPost && nextPost?.slug === post.slug ? undefined : nextPost,
        prevPost: prevPost?.slug === nextPost?.slug || !post ? undefined : prevPost,
        track: post.data.trackName,
      },
    };
  });
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}
//@ts-ignore
interface Params extends InferGetStaticParamsType<typeof getStaticPaths> {
  slug: string;
}

const { post, nextPost, prevPost } = Astro.props;
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={new URL(post.data.image.src, Astro.site).toString()}
>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
    <meta property="twitter:card" content="summary_large_image" />
  </Fragment>

  <Fragment slot="navbar">
    <CatButton slug={post.slug} />
  </Fragment>

  <PostPage post={post} />

  <PostNavigation
    prev={prevPost ? `/blog/${prevPost?.slug}` : undefined}
    next={nextPost ? `/blog/${nextPost?.slug}` : undefined}
  >
    {
      post.data.trackName && (
        <h3 slot="title" class="mb-3">
          Track:
          <span class="badge badge-info badge-sm">
            {post.data.trackName} #{post.data.trackIndex}
          </span>
        </h3>
      )
    }

    {post.data.trackName && <span slot="next">Check out next track article</span>}
    {post.data.trackName && <span slot="prev">Check out previous track article</span>}

    {!post.data.trackName && <span slot="next">Read next article</span>}
    {!post.data.trackName && <span slot="prev">Read previous article</span>}
  </PostNavigation>

  <div class="hidden" id="slug-holder" data-slug={post.slug}></div>

  <ScrollTopButton />
</Layout>

<script>
  import { postsApi } from "@/lib/api";

  function main() {
    const slugHolder = document.querySelector("#slug-holder") as HTMLElement | undefined;
    if (!slugHolder) return;

    const slug = slugHolder.dataset.slug;
    if (!slug) return;

    let hasViewed = !!localStorage.getItem(`view-post-${slug}`);
    let hasRead = !!localStorage.getItem(`read-post-${slug}`);

    if (!hasRead) {
      const footer = document.querySelector("#footer");
      if (!footer) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting && !hasRead) {
              await postsApi.readPost(slug).then((res) => {
                if ("error" in res) {
                  return;
                }
                localStorage.setItem(`read-post-${slug}`, "true");
                hasRead = true;
              });

              observer.disconnect();
            }
          });
        },
        { rootMargin: "200px" },
      );
      observer.observe(footer);
    }

    if (!hasViewed) {
      postsApi.viewPost(slug).then((res) => {
        if ("error" in res) {
          return;
        }
        localStorage.setItem(`view-post-${slug}`, "true");
        hasViewed = true;
      });
    }
  }
  main();
</script>

<style is:global>
  :is(h1, h2, h3, h4, h5, h6) > a {
    @apply no-underline hover:text-primary transition-all !important;
  }

  a[target="_blank"] {
    @apply text-primary hover:text-primary/50 transition-all;
  }
</style>
