---
import AppIcon from "@/components/astro/AppIcon.astro";
import TableOfContents from "@/components/astro/posts/toc/TableOfContents.astro";
import { H1Renderer } from "@/components/solid/H1Renderer";
import { PostInfo } from "@/components/solid/PostInfo";
import Layout from "@/layouts/Layout.astro";
import { formatDate } from "@/lib/date";
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { IconSet } from "config";

export const getStaticPaths = (async () => {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {
  post: CollectionEntry<"posts">;
}
//@ts-expect-error
interface Params extends InferGetStaticParamsType<typeof getStaticPaths> {
  slug: string;
}

const { post } = Astro.props;
const { Content, headings } = await post.render();
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={new URL(post.data.image.src, Astro.site).toString()}
>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
    <meta property="twitter:card" content="summary_large_image" />
  </Fragment>

  <header class="mx-auto w-fit mt-8 mb-8">
    <h1 class="text-6xl font-extrabold mb-12">
      {post.data.title}
    </h1>

    <div class="max-h-[400px] h-[400px]">
      <Image
        src={post.data.image}
        alt={post.data.imageAlt}
        width={700}
        height={400}
        class="rounded-xl h-full object-cover"
      />
    </div>

    <div class="mx-auto mt-4 w-fit flex items-center gap-2 h-6">
      <PostInfo
        client:only="solid"
        postId={post.slug}
        date={formatDate(post.data.date)}
      />
    </div>
  </header>

  <div
    class="lg:grid flex flex-col lg:grid-cols-[250px_1fr] xl:grid-cols-[300px_1fr] lg:pl-8 gap-[clamp(1rem,10vw,3rem)] items-start"
  >
    <TableOfContents
      headings={headings}
      class="lg:sticky lg:top-24 mx-auto lg:mx-0 w-full max-w-[95%] md:max-w-[85%] lg:max-w-full"
    />

    <div class="max-w-full md:mx-auto lg:mx-0">
      <div
        class="prose prose-lg xl:prose-xl prose-code:not-prose justify-self-center"
      >
        <Content components={{ h1: H1Renderer }} />
      </div>
    </div>
  </div>

  <button
    id="scroll-top-btn"
    class="fixed bottom-2 btn-primary right-2 z-[10] btn text-2xl opacity-0 translate-y-[120px] [&.visible]:translate-y-0 [&.visible]:opacity-100"
  >
    <AppIcon set={IconSet.LINE_MD} name="arrow-up" />
  </button>
</Layout>

<script>
  import { actions } from "astro:actions";

  const attachListeners = () => {
    const postSlug = window.location.pathname.split("/").pop()!;
    let hasViewed = !!localStorage.getItem(`view-post-${postSlug}`);
    let hasRead = !!localStorage.getItem(`read-post-${postSlug}`);

    if (!hasRead) {
      const footer = document.querySelector("#footer");
      if (!footer) return;
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting && !hasRead) {
              await actions.readPost({ postId: postSlug });
              localStorage.setItem(`read-post-${postSlug}`, "true");
              hasRead = true;
              observer.disconnect();
            }
          });
        },
        { rootMargin: "200px" },
      );
      observer.observe(footer);
    }

    if (!hasViewed) {
      actions.viewPost({ postId: postSlug }).then(() => {
        localStorage.setItem(`view-post-${postSlug}`, "true");
        hasViewed = true;
      });
    }
  };

  document.addEventListener("astro:page-load", attachListeners);
  document.addEventListener("astro:after-swap", attachListeners);
</script>

<script>
  import { debounce } from "@/lib/utils";

  const attachListeners = () => {
    const button = document.querySelector("#scroll-top-btn");

    button?.addEventListener("click", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    });

    let prevScroll = 0;

    const handleScroll = debounce(() => {
      if (!prevScroll) {
        prevScroll = window.scrollY;
        return;
      }
      if (prevScroll < window.scrollY) {
        button?.classList.remove("visible");
      } else {
        button?.classList.add("visible");
      }
      prevScroll = window.scrollY;
    }, 100);

    window.addEventListener("scroll", handleScroll);
  };

  document.addEventListener("astro:page-load", attachListeners);
  document.addEventListener("astro:after-swap", attachListeners);
</script>

<style is:global>
  :is(h1, h2, h3, h4, h5, h6) > a {
    @apply no-underline hover:text-primary transition-all !important;
  }
</style>
