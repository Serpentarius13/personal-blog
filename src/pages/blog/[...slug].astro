---
import ScrollTopButton from "@/components/astro/ScrollTopButton.astro";
import NavbarShrink from "@/components/astro/navbar/NavbarShrink.astro";
import CatButton from "@/components/astro/posts/CatButton.astro";
import PostNavigation from "@/components/astro/posts/PostNavigation.astro";
import PostPage from "@/components/astro/posts/PostPage.astro";
import TableOfContents from "@/components/astro/posts/toc/TableOfContents.astro";
import Layout from "@/layouts/base";
import { getPosts } from "@/lib/posts";
import "@fontsource-variable/jetbrains-mono";
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async () => {
  const posts = await getPosts();

  return posts.map((post, ix) => {
    const nextPost = posts.at(ix + 1 < posts.length ? ix + 1 : 0);
    const prevPost = posts.at(ix - 1 >= 0 ? ix - 1 : -1);

    return {
      params: { slug: post.slug },
      props: {
        post,
        nextPost: nextPost && nextPost?.slug === post.slug ? undefined : nextPost,
        prevPost: prevPost?.slug === nextPost?.slug || !post ? undefined : prevPost,
      },
    };
  });
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}
//@ts-ignore
interface Params extends InferGetStaticParamsType<typeof getStaticPaths> {
  slug: string;
}

const { post, nextPost, prevPost } = Astro.props;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: post.data.title,
  datePublished: post.data.date.toISOString(),
} as any;

if (post.data.updatedDate) {
  structuredData.dateModified = post.data.updatedDate.toISOString();
}

const {
  Content,
  headings,
  remarkPluginFrontmatter: { readingTime },
} = await post.render();
---

<Layout title={post.data.title} description={post.data.description} image={post.data.image?.src}>
  <Fragment slot="head">
    <meta property="og:type" content="article" />

    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  </Fragment>

  <Fragment slot="navbar">
    <Fragment>
      <CatButton slug={post.slug} />

      <TableOfContents headings={headings} data-pagefind-ignore="all" />
    </Fragment>
  </Fragment>

  <PostPage post={post} readingTime={readingTime}>
    <Content />
  </PostPage>

  <PostNavigation prev={prevPost} next={nextPost} />

  <div class="hidden" id="slug-holder" data-slug={post.slug}></div>

  <ScrollTopButton id="scroll-top-button" />

  <NavbarShrink />
</Layout>

<script>
  import { HIDE_UI_SERVICE } from "@/lib/config";
  import { debounce } from "@/lib/utils";

  const button = document.querySelector("#scroll-top-button");
  const navbar = document.querySelector("#navbar") as HTMLElement | undefined;
  const toc = document.querySelector("#toc") as HTMLElement | undefined;

  button?.addEventListener("click", () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  });

  let prevScroll = 0;
  let distanceToTop = 0;
  const THRESHOLD = 750;

  const handleScroll = debounce(() => {
    if (!prevScroll) {
      prevScroll = window.scrollY;
      return;
    }

    if (window.scrollY < 1000) {
      toc?.classList.remove("scroll-hidden");
      navbar?.classList.remove("scroll-hidden");
      return;
    }

    if (window.scrollY > prevScroll) {
      button?.classList.remove("visible");
      distanceToTop = 0;

      if (HIDE_UI_SERVICE.getIsHideUi()) {
        toc?.classList.toggle("scroll-hidden", true);
        navbar?.classList.toggle("scroll-hidden", true);
      }
    } else {
      if (distanceToTop > THRESHOLD) {
        button?.classList.toggle("visible", true);
        toc?.classList.remove("scroll-hidden");
        navbar?.classList.remove("scroll-hidden");
        distanceToTop = 0;
      } else {
        distanceToTop += prevScroll - window.scrollY;
      }
    }

    prevScroll = window.scrollY;
  }, 100);

  window.addEventListener("scroll", handleScroll, { passive: true });
</script>

<style is:global>
  .scroll-hidden:not(#toc) {
    @apply opacity-0 translate-x-[50vw];
  }

  #toc.scroll-hidden {
    @apply opacity-0 -lg:translate-x-[50vw];
  }

  #toc {
    @apply transition-all;
  }
</style>

<script>
  import { postsApi } from "@/lib/api";

  function detectBot(userAgent: string): boolean {
    const knownBotPatterns = [/bot|crawl|spider/i, /google|bing|yandex/i];
    return knownBotPatterns.some((pattern) => new RegExp(pattern).test(userAgent));
  }

  const isRunByBot = detectBot(navigator.userAgent);

  if (!isRunByBot) {
    main();
  }

  function main() {
    const slugHolder = document.querySelector("#slug-holder") as HTMLElement | undefined;
    if (!slugHolder) return;

    const slug = slugHolder.dataset.slug;
    if (!slug) return;

    let hasViewed = !!localStorage.getItem(`view-post-${slug}`);
    let hasRead = !!localStorage.getItem(`read-post-${slug}`);

    if (!hasRead) {
      const footer = document.querySelector("#footer");
      if (!footer) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting && !hasRead) {
              await postsApi.readPost(slug).then((res) => {
                if ("error" in res) {
                  return;
                }
                localStorage.setItem(`read-post-${slug}`, "true");
                hasRead = true;
              });

              observer.disconnect();
            }
          });
        },
        { rootMargin: "200px" },
      );
      observer.observe(footer);
    }

    if (!hasViewed) {
      postsApi.viewPost(slug).then((res) => {
        if ("error" in res) {
          return;
        }
        localStorage.setItem(`view-post-${slug}`, "true");
        hasViewed = true;
      });
    }
  }
</script>

<style is:global>
  :is(h1, h2, h3, h4, h5, h6) > a {
    @apply no-underline hover:text-primary transition-all font-bold !important;
  }

  a[target="_blank"] {
    @apply text-primary hover:text-primary/50 transition-all;
  }
</style>
