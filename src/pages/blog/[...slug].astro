---
import AppIcon from "@/components/astro/AppIcon.astro";
import TableOfContents from "@/components/astro/posts/toc/TableOfContents.astro";
import { H1Renderer } from "@/components/solid/H1Renderer";
import { PostInfo } from "@/components/solid/PostInfo";
import Layout from "@/layouts/Layout.astro";
import { formatDate } from "@/lib/date";
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { IconSet } from "config";

export const getStaticPaths = (async () => {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}) satisfies GetStaticPaths;

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {
  post: CollectionEntry<"posts">;
}
//@ts-expect-error
interface Params extends InferGetStaticParamsType<typeof getStaticPaths> {
  slug: string;
}

const { post } = Astro.props;
const { Content, headings } = await post.render();
---

<Layout
  title={post.data.title}
  description={post.data.description}
  mainClassname="px-4 gap-12 relative"
>
  <header class="mx-auto w-fit mt-8 mb-8">
    <h1 class="text-6xl font-extrabold mb-12">
      {post.data.title}
    </h1>

    <Image
      src={post.data.image}
      alt={post.data.imageAlt}
      width={700}
      height={300}
      class="rounded-xl"
    />

    <div class="mx-auto mt-4 w-fit flex items-center gap-2 h-6">
      <PostInfo
        client:only="solid"
        postId={post.slug}
        date={formatDate(post.data.date)}
      />
    </div>
  </header>

  <TableOfContents
    headings={headings}
    class="lg:-z-[0] hidden lg:block lg:w-[210px] xl:w-[260px] 2xl:w-[300px] relative lg:left-4 lg:bottom-12 h-fit lg:fixed"
  />

  <section class="card prose box lg:hidden lg:mt-0 mt-12">
    <span class="text-2xl font-bold"> In this article: </span>
    <ul class="list-disc">
      {headings.filter((h) => h.depth === 2).map((h) => <li>{h.text}</li>)}
    </ul>
  </section>

  <div class="box mx-auto">
    <div class="prose">
      <Content components={{ h1: H1Renderer }} />
    </div>
  </div>

  <button
    id="scroll-top-btn"
    class="fixed bottom-2 btn-primary right-2 z-[10] btn text-2xl opacity-0 translate-y-[120px] [&.visible]:translate-y-0 [&.visible]:opacity-100"
  >
    <AppIcon set={IconSet.LINE_MD} name="arrow-up" />
  </button>
</Layout>

<script>
  import { actions } from "astro:actions";

  const attachListeners = () => {
    const postSlug = window.location.pathname.split("/").pop()!;
    let hasViewed = !!localStorage.getItem(`view-post-${postSlug}`);
    let hasRead = !!localStorage.getItem(`read-post-${postSlug}`);

    if (!hasRead) {
      const footer = document.querySelector("#footer");
      if (!footer) return;
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(async (entry) => {
            if (entry.isIntersecting && !hasRead) {
              await actions.readPost({ postId: postSlug });
              localStorage.setItem(`read-post-${postSlug}`, "true");
              hasRead = true;
              observer.disconnect();
            }
          });
        },
        { rootMargin: "200px" },
      );
      observer.observe(footer);
    }

    if (!hasViewed) {
      actions.viewPost({ postId: postSlug }).then(() => {
        localStorage.setItem(`view-post-${postSlug}`, "true");
        hasViewed = true;
      });
    }
  };

  document.addEventListener("astro:page-load", attachListeners);
  document.addEventListener("astro:after-swap", attachListeners);
</script>

<script>
  const attachListeners = () => {
    const button = document.querySelector("#scroll-top-btn");

    button?.addEventListener("click", () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    });

    document.body.addEventListener("wheel", handleWheel);

    function handleWheel(event: WheelEvent) {
      if (checkScrollDirectionIsUp(event)) {
        button?.classList.remove("visible");
      } else {
        button?.classList[window.scrollY > 250 ? "add" : "remove"]("visible");
      }
    }

    function checkScrollDirectionIsUp(event: WheelEvent) {
      if (event.deltaY) {
        return event.deltaY > 0;
      }
      return event.deltaY < 0;
    }
  };

  document.addEventListener("astro:page-load", attachListeners);
  document.addEventListener("astro:after-swap", attachListeners);
</script>
